# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LandsatIndexPluginDialog
                                 A QGIS plugin
 Calculate Landsat indices (NDVI, NDBI, etc.)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-06-04
        git sha              : $Format:%H$
        copyright            : (C) 2025
        email                : your-email@example.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox
from qgis.core import QgsRasterLayer, QgsProject
from qgis.utils import iface
import processing

# This loads your .ui file at runtime
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'landsat_index_plugin_dialog_base.ui'))


class LandsatIndexPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LandsatIndexPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # Initialize variables to store selected band paths
        self.band4_path = None
        self.band5_path = None
        self.band6_path = None
        
        # Setup the combo box with index options
        self.setup_combo_box()
        
        # Connect buttons to their functions
        self.connect_buttons()
    
    def setup_combo_box(self):
        """Populate the combo box with available indices."""
        indices = [
            "NDVI (Normalized Difference Vegetation Index)",
            "NDBI (Normalized Difference Built-up Index)", 
            "NDWI (Normalized Difference Water Index)",
            "SAVI (Soil Adjusted Vegetation Index)",
            "EVI (Enhanced Vegetation Index)"
        ]
        self.combo_index.addItems(indices)
    
    def connect_buttons(self):
        """Connect UI buttons to their respective functions."""
        self.btn_select_b4.clicked.connect(self.select_band4)
        self.btn_select_b5.clicked.connect(self.select_band5)
        self.btn_select_b6.clicked.connect(self.select_band6)
        self.btn_calculate.clicked.connect(self.calculate_index)
    
    def select_band4(self):
        """Open file dialog to select Band 4 (Red)."""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select Landsat Band 4 (Red)",
            "",
            "Raster files (*.tif *.tiff *.TIF *.TIFF);;All files (*.*)"
        )
        if file_path:
            self.band4_path = file_path
            self.btn_select_b4.setText(f"Band 4: {os.path.basename(file_path)}")
            print(f"Band 4 selected: {file_path}")
    
    def select_band5(self):
        """Open file dialog to select Band 5 (NIR)."""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select Landsat Band 5 (NIR)",
            "",
            "Raster files (*.tif *.tiff *.TIF *.TIFF);;All files (*.*)"
        )
        if file_path:
            self.band5_path = file_path
            self.btn_select_b5.setText(f"Band 5: {os.path.basename(file_path)}")
            print(f"Band 5 selected: {file_path}")
    
    def select_band6(self):
        """Open file dialog to select Band 6 (SWIR1) - for NDBI, NDWI."""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select Landsat Band 6 (SWIR1)",
            "",
            "Raster files (*.tif *.tiff *.TIF *.TIFF);;All files (*.*)"
        )
        if file_path:
            self.band6_path = file_path
            self.btn_select_b6.setText(f"Band 6: {os.path.basename(file_path)}")
            print(f"Band 6 selected: {file_path}")
    
    def calculate_index(self):
        """Calculate the selected index based on user inputs."""
        selected_index = self.combo_index.currentText()
        
        # Check which index is selected and validate required bands
        if "NDVI" in selected_index:
            self.calculate_ndvi()
        elif "NDBI" in selected_index:
            self.calculate_ndbi()
        elif "NDWI" in selected_index:
            self.calculate_ndwi()
        elif "SAVI" in selected_index:
            self.calculate_savi()
        elif "EVI" in selected_index:
            self.calculate_evi()
        else:
            QMessageBox.warning(self, "Error", "Please select a valid index!")
    
    def calculate_ndvi(self):
        """Calculate NDVI = (NIR - Red) / (NIR + Red)"""
        if not self.band4_path or not self.band5_path:
            QMessageBox.warning(self, "Missing Bands", 
                              "Please select both Band 4 (Red) and Band 5 (NIR) for NDVI calculation!")
            return
        
        try:
            # Use QGIS raster calculator
            formula = f'("{self.band5_path}@1" - "{self.band4_path}@1") / ("{self.band5_path}@1" + "{self.band4_path}@1")'
            
            output_path = QFileDialog.getSaveFileName(
                self, "Save NDVI Result", "", "GeoTIFF (*.tif)")[0]
            
            if output_path:
                # Use processing algorithm for raster calculation
                processing.run("qgis:rastercalculator", {
                    'EXPRESSION': formula,
                    'LAYERS': [self.band4_path, self.band5_path],
                    'OUTPUT': output_path
                })
                
                # Load result to QGIS
                layer = QgsRasterLayer(output_path, "NDVI")
                if layer.isValid():
                    QgsProject.instance().addMapLayer(layer)
                    QMessageBox.information(self, "Success", "NDVI calculated and added to map!")
                else:
                    QMessageBox.critical(self, "Error", "Failed to load NDVI result!")
                    
        except Exception as e:
            QMessageBox.critical(self, "Calculation Error", f"Error calculating NDVI: {str(e)}")
    
    def calculate_ndbi(self):
        """Calculate NDBI = (SWIR1 - NIR) / (SWIR1 + NIR)"""
        if not self.band5_path or not self.band6_path:
            QMessageBox.warning(self, "Missing Bands", 
                              "Please select both Band 5 (NIR) and Band 6 (SWIR1) for NDBI calculation!")
            return
        
        try:
            formula = f'("{self.band6_path}@1" - "{self.band5_path}@1") / ("{self.band6_path}@1" + "{self.band5_path}@1")'
            
            output_path = QFileDialog.getSaveFileName(
                self, "Save NDBI Result", "", "GeoTIFF (*.tif)")[0]
            
            if output_path:
                processing.run("qgis:rastercalculator", {
                    'EXPRESSION': formula,
                    'LAYERS': [self.band5_path, self.band6_path],
                    'OUTPUT': output_path
                })
                
                layer = QgsRasterLayer(output_path, "NDBI")
                if layer.isValid():
                    QgsProject.instance().addMapLayer(layer)
                    QMessageBox.information(self, "Success", "NDBI calculated and added to map!")
                else:
                    QMessageBox.critical(self, "Error", "Failed to load NDBI result!")
                    
        except Exception as e:
            QMessageBox.critical(self, "Calculation Error", f"Error calculating NDBI: {str(e)}")
    
    def calculate_ndwi(self):
        """Calculate NDWI = (NIR - SWIR1) / (NIR + SWIR1)"""
        if not self.band5_path or not self.band6_path:
            QMessageBox.warning(self, "Missing Bands", 
                              "Please select both Band 5 (NIR) and Band 6 (SWIR1) for NDWI calculation!")
            return
        
        try:
            formula = f'("{self.band5_path}@1" - "{self.band6_path}@1") / ("{self.band5_path}@1" + "{self.band6_path}@1")'
            
            output_path = QFileDialog.getSaveFileName(
                self, "Save NDWI Result", "", "GeoTIFF (*.tif)")[0]
            
            if output_path:
                processing.run("qgis:rastercalculator", {
                    'EXPRESSION': formula,
                    'LAYERS': [self.band5_path, self.band6_path],
                    'OUTPUT': output_path
                })
                
                layer = QgsRasterLayer(output_path, "NDWI")
                if layer.isValid():
                    QgsProject.instance().addMapLayer(layer)
                    QMessageBox.information(self, "Success", "NDWI calculated and added to map!")
                else:
                    QMessageBox.critical(self, "Error", "Failed to load NDWI result!")
                    
        except Exception as e:
            QMessageBox.critical(self, "Calculation Error", f"Error calculating NDWI: {str(e)}")
    
    def calculate_savi(self):
        """Calculate SAVI = ((NIR - Red) / (NIR + Red + L)) * (1 + L), where L = 0.5"""
        if not self.band4_path or not self.band5_path:
            QMessageBox.warning(self, "Missing Bands", 
                              "Please select both Band 4 (Red) and Band 5 (NIR) for SAVI calculation!")
            return
        
        try:
            # SAVI with L = 0.5
            formula = f'(("{self.band5_path}@1" - "{self.band4_path}@1") / ("{self.band5_path}@1" + "{self.band4_path}@1" + 0.5)) * 1.5'
            
            output_path = QFileDialog.getSaveFileName(
                self, "Save SAVI Result", "", "GeoTIFF (*.tif)")[0]
            
            if output_path:
                processing.run("qgis:rastercalculator", {
                    'EXPRESSION': formula,
                    'LAYERS': [self.band4_path, self.band5_path],
                    'OUTPUT': output_path
                })
                
                layer = QgsRasterLayer(output_path, "SAVI")
                if layer.isValid():
                    QgsProject.instance().addMapLayer(layer)
                    QMessageBox.information(self, "Success", "SAVI calculated and added to map!")
                else:
                    QMessageBox.critical(self, "Error", "Failed to load SAVI result!")
                    
        except Exception as e:
            QMessageBox.critical(self, "Calculation Error", f"Error calculating SAVI: {str(e)}")
    
    def calculate_evi(self):
        """Calculate EVI = 2.5 * ((NIR - Red) / (NIR + 6*Red - 7.5*Blue + 1))"""
        # For EVI, we need Blue band too, but let's simplify using available bands
        if not self.band4_path or not self.band5_path:
            QMessageBox.warning(self, "Missing Bands", 
                              "Please select both Band 4 (Red) and Band 5 (NIR) for simplified EVI calculation!")
            return
        
        try:
            # Simplified EVI without blue band correction
            formula = f'2.5 * (("{self.band5_path}@1" - "{self.band4_path}@1") / ("{self.band5_path}@1" + 6*"{self.band4_path}@1" + 1))'
            
            output_path = QFileDialog.getSaveFileName(
                self, "Save EVI Result", "", "GeoTIFF (*.tif)")[0]
            
            if output_path:
                processing.run("qgis:rastercalculator", {
                    'EXPRESSION': formula,
                    'LAYERS': [self.band4_path, self.band5_path],
                    'OUTPUT': output_path
                })
                
                layer = QgsRasterLayer(output_path, "EVI")
                if layer.isValid():
                    QgsProject.instance().addMapLayer(layer)
                    QMessageBox.information(self, "Success", "EVI calculated and added to map!")
                else:
                    QMessageBox.critical(self, "Error", "Failed to load EVI result!")
                    
        except Exception as e:
            QMessageBox.critical(self, "Calculation Error", f"Error calculating EVI: {str(e)}")